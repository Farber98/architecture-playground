package tasks

import "encoding/json"

// Task represents a unit of work submitted to the system.
type Task struct {
	// ID is a UUID generated by the server.
	ID string `json:"id"`

	// Type identifies the kind of task (e.g., "print", "sleep").
	// Handlers are resolved dynamically based on this field.
	Type string `json:"type"`

	// Payload holds task-specific parameters in raw JSON.
	// It is decoded only by the handler responsible for the task type.
	Payload json.RawMessage `json:"payload"`

	// Status reflects the current lifecycle state of the task.
	// Set to "submitted" initially, then updated by the runner.
	Status string `json:"status"`

	// Result holds the outcome of task execution as a user-readable message.
	// This is populated by the handler once the task has completed.
	Result string `json:"result"`
}
